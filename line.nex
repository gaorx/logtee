/([a-zA-Z0-9]|_|-|:|\.)+/          { lval.v = yylex.Text(); return tFieldName; }
/=/                   {lval.v = yylex.Text(); return tEquals;}
/"(\\"|[^"])*"/      { lval.v = yylex.Text(); return tEscapeValue; }
/([a-zA-Z0-9]|-|\.)*/          { lval.v = yylex.Text(); return tUnescapeValue; }
/[ \t\n\r]+/        {  }
//

package logtee
import (
    "bytes"
    "fmt"
    "errors"
)

type fieldEntry struct {
    n, v string
}

func parseFieldEntries(line string) (entries []fieldEntry, err error) {
    defer func(){
        if r := recover(); r != nil {
            entries, err = nil, errors.New("Panic: yyParse")
        }
    }()
    lexer := NewLexer(bytes.NewBufferString(line))
    code := yyParse(lexer)
    if code != 0 {
        return nil, fmt.Errorf("yyParse error: %d", code)
    }
    result := lexer.parseResult.(yySymType).entries
    for i := 0; i < len(result); i++ {
        entry := &(result[i])
        v := entry.v
        if len(v) > 0 && v[0] == '"' {
            nv, err := unescape(v)
            if err != nil {
                return nil, fmt.Errorf("Unescape error: %q", v)
            }
            entry.v = nv
        }
    }
    return result, nil
}
